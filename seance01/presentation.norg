* Exemple de projet

** Objectif

   On imagine qu'on veut coder une application de recommandation d'annonces immobilières "intéressantes".
   Plus précisément, un acheteur potentiel renseignerait certains critères: tranche de prix, nombre de pièces min, quartiers...
   L'application renverrait alors les 10 premières annonces correspondant à ces critères à examiner en priorité.

** Modélisation

   La difficulté principale est d'arriver à définir ce qui constitue une annonce "intéressante".
   On va raisonner de la façon suivante.
   Chaque bien immobilier possède des caractéristiques physiques précises:
   ~ Surface
   ~ Quartier
   ~ Nombre de pièces
   ~ Appartement ou maison
   ~ Neuf ou ancien
   ~ Classe énergétique
   ~ Etc

   On imagine alors qu'il existe une fonction déterminée mais inconnue qui permettrait d'obtenir le prix rationnel du bien à partir de ces caractéristiques.
   Le prix affiché de l'annonce est alors une version bruitée de ce prix dûe à la subjectivité du vendeur.
   Une annonce sera alors d'autant plus intéressante que l'écart entre le prix rationnel et le prix affiché est grand.

** Procédure

   ~ La première étape consistera alors à récupérer les données brutes depuis internet via du "webscraping" par exemple sur le site {https://www.leboncoin.fr/}[leboncoin].
     Á la fin de cette étape, on aura donc une base de données brutes sous forme non structurée (typiquement un fichier `json` ).
   ~ La deuxième partie consistera à nettoyer cette base de donnée (éliminer les doublons ou les annonces trop incomplètes par exemple) puis à numériser le résultat.
     Les caractéristiques de chaque annonce sera alors représenté par un vecteur de $\mathbb{R}^D$.
     Noter que si dans certains la numérisation est évidente (e.g. surface, nombre de pièce), dans d'autres cela peut être un peu plus délicat.
     Par exemple, dans le cas du quartier le fait de simplement numéroter les quartiers induit une notion d'ordre et de distance entre quartier totalement articielle qui pourrait biaiser la suite de la procédure.
     On verra dans ce cas qu'on peut utiliser un `OneHotEncoder`.
   ~ Entrainement (TODO) invoquer TCL et parler connexion moyenne variance pour erreur quadratique moyenne.
   ~ Exploitation du prédicteur (TODO) différencier machine learning et statistique inférentiel
